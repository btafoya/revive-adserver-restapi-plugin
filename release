#!/bin/bash
#
# Single command automated release script for Claude Code
# Usage: ./release 1.2.3 ["Optional commit message"]
#

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[RELEASE]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if version provided
if [ -z "$1" ]; then
    print_error "Version required!"
    echo ""
    echo "Usage: ./release <version> [commit-message]"
    echo "Examples:"
    echo "  ./release 1.2.3"
    echo "  ./release 1.2.4 'Add new API endpoints'"
    echo ""
    echo "This script automates the complete release process:"
    echo "  â€¢ Stages and commits any pending changes"
    echo "  â€¢ Updates plugin.xml and composer.json versions"  
    echo "  â€¢ Creates git tag and pushes to trigger GitHub Actions"
    echo "  â€¢ Provides release tracking URLs"
    exit 1
fi

VERSION="$1"
COMMIT_MSG="${2:-Prepare for release $VERSION}"

# Validate version format
if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    print_error "Version must be in format X.Y.Z (e.g., 1.2.3)"
    exit 1
fi

print_status "ðŸš€ Starting automated release for version $VERSION"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository!"
    exit 1
fi

# Use PHP release script
print_status "ðŸ”§ Executing PHP release automation..."
php scripts/release.php "$VERSION" "$COMMIT_MSG"

print_success "ðŸŽ‰ Automated release completed!"
print_status "ðŸ“Š Next steps:"
echo "  â€¢ Monitor GitHub Actions: https://github.com/btafoya/revive-adserver-restapi-plugin/actions"
echo "  â€¢ Check release: https://github.com/btafoya/revive-adserver-restapi-plugin/releases"
echo "  â€¢ Download will be: reviveRestApi-$VERSION.zip"